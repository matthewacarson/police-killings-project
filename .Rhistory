# Subset stsp to remove NAs
stsp_backup <- stsp
stsp <- stsp[!is.na(stsp$tr_pchrent),]
class(stap)
class(stsp)
load("C:/Users/madou/OneDrive - UCLA IT Services/1)_PS-Honors/police-killings-project_union_PC/udp_expansion_matt/data/R_data/stsp.RData")
stsf <-
stsp %>%
st_as_sf() %>%
st_transform(4269) %>%
st_centroid() %>%
st_join(., puma) %>%
mutate(dense = case_when(puma_density >= 3000 ~ 1, TRUE ~ 0)) %>%
st_drop_geometry() %>%
select(GEOID, puma_density, dense) %>%
mutate(GEOID = as.numeric(GEOID))
stsf <-
stsp %>%
st_as_sf() %>%
st_transform(4269) %>%
st_centroid() %>%
st_join(., puma) %>%
mutate(dense = case_when(puma_density >= 3000 ~ 1, TRUE ~ 0)) %>%
st_drop_geometry()
stsf$GEOID <- as.numeric(stsf$GEOID)
stsf <- stsf[, c('GEOID', 'puma_density', 'dense')]
save(stsp, file = paste0(data_dir, r_data_folder, 'stsp.RData'))
reticulate::repl_python()
import sys
import census
quit
library(r-miniconda)
library(rminiconda)
reticulate::repl_python()
import sys
quit
if (!require(pacman)) install.packages("pacman"); pacman::p_load(googledrive, bit64, fs, data.table, tigris, tidycensus, tidyverse, spdep, raster, sp, parallel, sf, foreach, doParallel)
data_dir <- paste0(getwd(), '/udp_expansion_matt')
r_data_folder <- '/data/R_data/'
# save(df, file = paste0(data_dir, '/data/outputs/databases/zillow_database_2018.RData'))
load(file = paste0(data_dir, '/data/outputs/databases/zillow_database_2018.RData'))
### Tract data extraction function: add your state here
st <- c("AL", "AK", "AZ", "AR", "CA", "CO", "CT",
"DE", "DC", "FL", "GA", "HI", "ID", "IL",
"IN", "IA", "KS", "KY", "LA", "ME", "MD",
"MA", "MI", "MN", "MS", "MO", "MT", "NE",
"NV", "NH", "NJ", "NM", "NY", "NC", "ND",
"OH", "OK", "OR", "PA", "RI", "SC", "SD",
"TN", "TX", "UT", "VT", "VA", "WA", "WV",
"WI", "WY")
#         tr_pchrent = (tr_medrent18 - tr_medrent12)/tr_medrent12,
#         rm_medrent18 = median(tr_medrent18, na.rm = TRUE),
#         rm_medrent12 = median(tr_medrent12, na.rm = TRUE)) %>%
#     select(-medrent12, -medrent18) %>%
#     distinct() %>%
#     group_by(GEOID) %>%
#     filter(row_number() == 1) %>%
#     ungroup()
#
# save(tr_rents, file = paste0(data_dir, r_data_folder, 'tr_rents.Rdata'))
load(file = paste0(data_dir, r_data_folder, 'tr_rents.Rdata'))
load("C:/Users/madou/OneDrive - UCLA IT Services/1)_PS-Honors/police-killings-project_union_PC/udp_expansion_matt/data/R_data/stsp_backup.RData")
stsp <- stsp_backup
stsp@data <- stsp@data |>
select(
GEOID,
tr_medrent18,
tr_medrent12,
tr_chrent,
tr_pchrent,
rm_medrent18,
rm_medrent12
) |> mutate(GEOID = as.numeric(GEOID))
lw_dist_idwW_filter <- lw_dist_idwW
lw_dist_idwW_filter$neighbours <- lw_dist_idwW$neighbours[!is.na(stsp$tr_chrent)]
lw_dist_idwW_filter$weights <- lw_dist_idwW$weights[!is.na(stsp$tr_chrent)]
stsp$tr_pchrent.lag <- lag.listw(lw_dist_idwW_filter, stsp$tr_pchrent)
lw_dist_idwW_filter <- lw_dist_idwW[!is.na(stsp$tr_chrent)]
stsp$tr_pchrent.lag <- lag.listw(lw_dist_idwW_filter, stsp$tr_pchrent)
subsets(lw_dist_idwW, subset = !is.na(stsp$tr_chrent))
!is.na(stsp$tr_chrent)
subsets(lw_dist_idwW, subset = !is.na(stsp$tr_chrent))
subset(lw_dist_idwW, subset = !is.na(stsp$tr_chrent))
subset_lw_dist_idwW <- subgraph(lw_dist_idwW, subset = logical_vector)
subset_lw_dist_idwW <- sublistw(lw_dist_idwW, subset = logical_vector)
if (!require(pacman)) install.packages("pacman"); pacman::p_load(googledrive, bit64, fs, data.table, tigris, tidycensus, tidyverse, spdep, raster, sp, parallel, sf, foreach, doParallel)
# Create neighbor matrix
# -----------------------------------------------------
coords <- coordinates(stsp)
stsp@polygons
test <- stsp@polygons[!is.na(stsp$tr_chrent)]
test <- stsp
test@polygons <- stsp@polygons[!is.na(stsp$tr_chrent)]
head(stsp@plotOrder)
head(stsp@plotOrder, 55)
length(stsp@plotOrder)
stsp@plotOrder <- stsp@plotOrder[!is.na(stsp$tr_chrent)]
length(stsp@plotOrder)
nrows(stsp$tr_medrent18)
nrow(stsp$tr_medrent18)
length(stsp$tr_medrent18)
stsp@data <- stsp@data[!is.na(stsp$tr_chrent),]
length(stsp@polygons)
length(stsp@bbox)
stsp@bbox
head(stsp@proj4string)
class(stsp@proj4string)
length(stsp@proj4string)
stsp@proj4string
stsp <- stsp_backup
stsp@data <- stsp@data |>
select(
GEOID,
tr_medrent18,
tr_medrent12,
tr_chrent,
tr_pchrent,
rm_medrent18,
rm_medrent12
) |> mutate(GEOID = as.numeric(GEOID))
stsp@data <- stsp@data[!is.na(stsp$tr_chrent),]
stsp@polygons <- stsp@polygons[!is.na(stsp$tr_chrent)]
stsp@plotOrder <- stsp@plotOrder[!is.na(stsp$tr_chrent)]
rownames(stsp@data) <- as.character(seq(nrow(stsp@data)))
rownames(stsp@polygons)
rownames(stsp@plotOrder)
rm(test)
stsp <- stsp_backup
stsp@data <- stsp@data |>
select(
GEOID,
tr_medrent18,
tr_medrent12,
tr_chrent,
tr_pchrent,
rm_medrent18,
rm_medrent12
) |> mutate(GEOID = as.numeric(GEOID))
stsp@data <- stsp@data[!is.na(stsp$tr_chrent),]
stsp@polygons <- stsp@polygons[!is.na(stsp$tr_chrent)]
stsp@plotOrder <- stsp@plotOrder[!is.na(stsp$tr_chrent)]
rownames(stsp@data) <- as.character(seq(nrow(stsp@data)))
# Create neighbor matrix
# -----------------------------------------------------
cl <- makeCluster(4) # manually set # of cores
registerDoParallel(cl) # begin running in parallel
coords <- coordinates(stsp)
IDs <- row.names(as(stsp, "data.frame"))
stsp_nb <- poly2nb(stsp) # nb
# save(stsp_nb, file = paste0(data_dir, r_data_folder, 'stsp_nb.RData'))
# load(file = paste0(data_dir, r_data_folder, 'stsp_nb.RData'))
lw_bin <- nb2listw(stsp_nb, style = "W", zero.policy = TRUE)
# save(lw_bin, file = paste0(data_dir, r_data_folder, 'lw_bin.RData'))
# load(file = paste0(data_dir, r_data_folder, 'lw_bin.RData'))
knearneigh1 <- knearneigh(coords, k = 1)
kern1 <- knn2nb(knearneigh1) #, row.names=IDs)
# save(kern1, file = paste0(data_dir, r_data_folder, 'kern1.RData'))
# load(file = paste0(data_dir, r_data_folder, 'kern1.RData'))
dist <- unlist(nbdists(kern1, coords))
# save(dist, file = paste0(data_dir, r_data_folder, 'dist.RData'))
# load(file = paste0(data_dir, r_data_folder, 'dist.RData'))
max_1nn <- max(dist)
# save(max_1nn, file = paste0(data_dir, r_data_folder, 'max_1nn.RData'))
# load(file = paste0(data_dir, r_data_folder, 'max_1nn.RData'))
dist_nb <- dnearneigh(coords, d1=0, d2 = .1*max_1nn) #, row.names = IDs)
# save(dist_nb, file = paste0(data_dir, r_data_folder, 'dist_nb.RData'))
# load(file = paste0(data_dir, r_data_folder, 'dist_nb.RData'))
spdep::set.ZeroPolicyOption(TRUE)
spdep::set.ZeroPolicyOption(TRUE)
dists <- nbdists(dist_nb, coordinates(stsp))
# save(idw, file = paste0(data_dir, r_data_folder, 'dists.RData'))
# load(file = paste0(data_dir, r_data_folder, 'dists.RData'))
idw <- lapply(dists, function(x) 1/(x^2))
lw_dist_idwW <- nb2listw(dist_nb, glist = idw, style = "W")
# save(lw_dist_idwW, file = paste0(data_dir, r_data_folder, 'lw_dist_idwW.RData'))
load(file = paste0(data_dir, r_data_folder, 'lw_dist_idwW.RData'))
# Filter out so that lw_dist_idwW is same length as stsp ------------------
lw_dist_idwW_filter <- lw_dist_idwW[!is.na(stsp$tr_chrent)]
lw_dist_idwW_filter$neighbours <- lw_dist_idwW$neighbours[!is.na(stsp$tr_chrent)]
lw_dist_idwW_filter$weights <- lw_dist_idwW$weights[!is.na(stsp$tr_chrent)]
#
#
# Create select lag variables ####
# ----------------------------------------------------- #
stsp$tr_pchrent.lag <- lag.listw(lw_dist_idwW_filter, stsp$tr_pchrent)
stsp$tr_pchrent.lag <- lag.listw(lw_dist_idwW, stsp$tr_pchrent)
idw
View(stsp)
stsp <- stsp_backup
stsp@data <- stsp@data |>
select(
GEOID,
tr_medrent18,
tr_medrent12,
tr_chrent,
tr_pchrent,
rm_medrent18,
rm_medrent12
) |> mutate(GEOID = as.numeric(GEOID))
stsp@data <- stsp@data[!is.na(stsp$tr_chrent),]
stsp@polygons <- stsp@polygons[!is.na(stsp$tr_chrent)]
stsp@plotOrder <- stsp@plotOrder[!is.na(stsp$tr_chrent)]
View(stsp)
length(stsp@polygons[!is.na(stsp$tr_chrent)])
class(stsp@polygons[!is.na(stsp$tr_chrent)])
length(stsp@polygons[[!is.na(stsp$tr_chrent)]])
stsp@polygons[1]
length(!is.na(stsp$tr_chrent)
)
stsp <- stsp_backup
stsp <- stsp_backup
stsp@data <- stsp@data |>
select(
GEOID,
tr_medrent18,
tr_medrent12,
tr_chrent,
tr_pchrent,
rm_medrent18,
rm_medrent12
) |> mutate(GEOID = as.numeric(GEOID))
subset_logical <- !is.na(stsp$tr_chrent)
stsp@data <- stsp@data[subset_logical,]
stsp@polygons <- stsp@polygons[subset_logical,]
stsp@polygons <- stsp@polygons[subset_logical]
stsp@plotOrder <- stsp@plotOrder[subset_logical,]
stsp@plotOrder <- stsp@plotOrder[subset_logical]
View(stsp)
rownames(stsp@data) <- as.character(seq(nrow(stsp@data)))
# Create neighbor matrix
# -----------------------------------------------------
cl <- makeCluster(4) # manually set # of cores
registerDoParallel(cl) # begin running in parallel
coords <- coordinates(stsp)
IDs <- row.names(as(stsp, "data.frame"))
stsp_nb <- poly2nb(stsp) # nb
# save(stsp_nb, file = paste0(data_dir, r_data_folder, 'stsp_nb.RData'))
# load(file = paste0(data_dir, r_data_folder, 'stsp_nb.RData'))
lw_bin <- nb2listw(stsp_nb, style = "W", zero.policy = TRUE)
# save(lw_bin, file = paste0(data_dir, r_data_folder, 'lw_bin.RData'))
# load(file = paste0(data_dir, r_data_folder, 'lw_bin.RData'))
knearneigh1 <- knearneigh(coords, k = 1)
kern1 <- knn2nb(knearneigh1) #, row.names=IDs)
# save(kern1, file = paste0(data_dir, r_data_folder, 'kern1.RData'))
# load(file = paste0(data_dir, r_data_folder, 'kern1.RData'))
dist <- unlist(nbdists(kern1, coords))
# save(dist, file = paste0(data_dir, r_data_folder, 'dist.RData'))
# load(file = paste0(data_dir, r_data_folder, 'dist.RData'))
max_1nn <- max(dist)
# save(max_1nn, file = paste0(data_dir, r_data_folder, 'max_1nn.RData'))
# load(file = paste0(data_dir, r_data_folder, 'max_1nn.RData'))
dist_nb <- dnearneigh(coords, d1=0, d2 = .1*max_1nn) #, row.names = IDs)
# save(dist_nb, file = paste0(data_dir, r_data_folder, 'dist_nb.RData'))
# load(file = paste0(data_dir, r_data_folder, 'dist_nb.RData'))
spdep::set.ZeroPolicyOption(TRUE)
spdep::set.ZeroPolicyOption(TRUE)
dists <- nbdists(dist_nb, coordinates(stsp))
# save(idw, file = paste0(data_dir, r_data_folder, 'dists.RData'))
# load(file = paste0(data_dir, r_data_folder, 'dists.RData'))
idw <- lapply(dists, function(x) 1/(x^2))
lw_dist_idwW <- nb2listw(dist_nb, glist = idw, style = "W")
# save(lw_dist_idwW, file = paste0(data_dir, r_data_folder, 'lw_dist_idwW.RData'))
load(file = paste0(data_dir, r_data_folder, 'lw_dist_idwW.RData'))
# Filter out so that lw_dist_idwW is same length as stsp ------------------
lw_dist_idwW_filter <- lw_dist_idwW[!is.na(stsp$tr_chrent)]
lw_dist_idwW_filter$neighbours <- lw_dist_idwW$neighbours[!is.na(stsp$tr_chrent)]
lw_dist_idwW_filter$weights <- lw_dist_idwW$weights[!is.na(stsp$tr_chrent)]
#
#
# Create select lag variables ####
# ----------------------------------------------------- #
stsp$tr_pchrent.lag <- lag.listw(lw_dist_idwW, stsp$tr_pchrent)
stsp <- stsp_backup
stsp@data <- stsp@data |>
select(
GEOID,
tr_medrent18,
tr_medrent12,
tr_chrent,
tr_pchrent,
rm_medrent18,
rm_medrent12
) |> mutate(GEOID = as.numeric(GEOID))
subset_logical <- !is.na(stsp$tr_chrent)
stsp@data <- stsp@data[subset_logical,]
stsp@polygons <- stsp@polygons[subset_logical]
stsp@plotOrder <- stsp@plotOrder[subset_logical]
rownames(stsp@data) <- as.character(seq(nrow(stsp@data)))
kern1 <- knn2nb(knearneigh1, row.names=IDs)
dist_nb <- dnearneigh(coords, d1=0, d2 = .1*max_1nn, row.names = IDs)
spdep::set.ZeroPolicyOption(TRUE)
spdep::set.ZeroPolicyOption(TRUE)
dists <- nbdists(dist_nb, coordinates(stsp))
idw <- lapply(dists, function(x) 1/(x^2))
lw_dist_idwW <- nb2listw(dist_nb, glist = idw, style = "W")
lw_dist_idwW_filter <- lw_dist_idwW[!is.na(stsp$tr_chrent)]
lw_dist_idwW_filter$neighbours <- lw_dist_idwW$neighbours[!is.na(stsp$tr_chrent)]
lw_dist_idwW_filter$weights <- lw_dist_idwW$weights[!is.na(stsp$tr_chrent)]
stsp$tr_pchrent.lag <- lag.listw(lw_dist_idwW, stsp$tr_pchrent)
stsp$tr_chrent.lag <- lag.listw(lw_dist, stsp$tr_chrent)
stsp$tr_chrent.lag <- lag.listw(lw_dist_idwW, stsp$tr_chrent)
stsp$tr_medrent18.lag <- lag.listw(lw_dist_idwW, stsp$tr_medrent18)
colnames(stsp)
colnames(stsp@data)
str(stsp@data)
lag <-
left_join(
df |> rename(GEOID = FIPS),
stsp@data) %>%
# mutate(GEOID = as.numeric(GEOID)) %>%
# select(c(1,14:22)) %>%
mutate(
tr_rent_gap = tr_medrent18.lag - tr_medrent18,
tr_rent_gapprop = tr_rent_gap/((tr_medrent18 + tr_medrent18.lag)/2),
rm_rent_gap = median(tr_rent_gap, na.rm = TRUE),
rm_rent_gapprop = median(tr_rent_gapprop, na.rm = TRUE),
rm_pchrent = median(tr_pchrent, na.rm = TRUE),
rm_pchrent.lag = median(tr_pchrent.lag, na.rm = TRUE),
rm_chrent.lag = median(tr_chrent.lag, na.rm = TRUE),
rm_medrent17.lag = median(tr_medrent18.lag, na.rm = TRUE),
dp_PChRent = case_when(tr_pchrent > 0 &
tr_pchrent > rm_pchrent ~ 1, # ∆ within tract
tr_pchrent.lag > rm_pchrent.lag ~ 1, # ∆ nearby tracts
TRUE ~ 0),
dp_RentGap = case_when(tr_rent_gapprop > 0 & tr_rent_gapprop > rm_rent_gapprop ~ 1,
TRUE ~ 0),
)
save(lag, file = paste0(data_dir, r_data_folder, 'lag.RData'))
stsf <-
stsp %>%
st_as_sf() %>%
st_transform(4269) %>%
st_centroid() %>%
st_join(., puma) %>%
mutate(dense = case_when(puma_density >= 3000 ~ 1, TRUE ~ 0)) %>%
st_drop_geometry() %>%
select(GEOID, puma_density, dense) %>%
mutate(GEOID = as.numeric(GEOID))
stsp %>%
st_as_sf()
head(stsp@polygons)
stsp <- stsp_backup
stsp@data <- stsp@data |>
select(
GEOID,
tr_medrent18,
tr_medrent12,
tr_chrent,
tr_pchrent,
rm_medrent18,
rm_medrent12
) |> mutate(GEOID = as.numeric(GEOID))
subset_logical <- !is.na(stsp$tr_chrent)
stsp@data <- stsp@data[subset_logical,]
stsf <-
stsp %>%
st_as_sf() %>%
st_transform(4269) %>%
st_centroid() %>%
st_join(., puma) %>%
mutate(dense = case_when(puma_density >= 3000 ~ 1, TRUE ~ 0)) %>%
st_drop_geometry() %>%
select(GEOID, puma_density, dense) %>%
mutate(GEOID = as.numeric(GEOID))
rownames(stsp@data) <- as.character(seq(nrow(stsp@data)))
stsp %>%
st_as_sf()
stsp@data <- stsp@data[subset_logical,]
stsp@polygons <- stsp@polygons[subset_logical]
stsp %>%
st_as_sf()
rownames(stsp@polygons)
names(stsp@polygons)
names(stsp@plotOrder)
stsp@data <- stsp@data |>
select(
GEOID,
tr_medrent18,
tr_medrent12,
tr_chrent,
tr_pchrent,
rm_medrent18,
rm_medrent12
) |> mutate(GEOID = as.numeric(GEOID))
subset_logical <- !is.na(stsp$tr_chrent)
stsp@data <- stsp@data[subset_logical,]
stsp@polygons <- stsp@polygons[subset_logical]
stsp@plotOrder <- stsp@plotOrder[subset_logical]
rownames(stsp@data) <- as.character(seq(nrow(stsp@data)))
#
save(lw_dist_idwW, file = paste0(data_dir, r_data_folder, 'lw_dist_idwW.RData'))
stsp$tr_pchrent.lag <- lag.listw(lw_dist_idwW, stsp$tr_pchrent)
stsp <- stsp_backup
stsp@data <- stsp@data |>
select(
GEOID,
tr_medrent18,
tr_medrent12,
tr_chrent,
tr_pchrent,
rm_medrent18,
rm_medrent12
) |> mutate(GEOID = as.numeric(GEOID))
subset_logical <- !is.na(stsp$tr_chrent)
stsp@data <- stsp@data[subset_logical,]
stsp@polygons <- stsp@polygons[subset_logical]
stsp@plotOrder <- stsp@plotOrder[subset_logical]
rownames(stsp@data) <- as.character(seq(nrow(stsp@data)))
stsp$tr_pchrent.lag <- lag.listw(lw_dist_idwW, stsp$tr_pchrent)
stsp$tr_chrent.lag <- lag.listw(lw_dist_idwW, stsp$tr_chrent)
stsp$tr_medrent18.lag <- lag.listw(lw_dist_idwW, stsp$tr_medrent18)
# save(stsp, file = paste0(data_dir, r_data_folder, 'stsp_tr_medrent18_lag.RData'))
# load(file = paste0(data_dir, r_data_folder, 'stsp_tr_medrent18_lag.RData'))
save(stsp, file = paste0(data_dir, r_data_folder, 'stsp_lags.Rdata'))
stsp_as_sf <-
stsp %>%
st_as_sf()
stsp_as_sf <-
stsp@polygons %>%
st_as_sf()
class(stsp@polygons)
class(stsp_backup@polygons)
class(stsp_backup@data)
View(stsp@polygons)
View(stsp_backup@polygons)
class(stsp)
class(stsp_backup)
install.packages(rgeos)
install.packages('rgeos')
st_is_valid(stsp)
library(sp)
library(sf)
library(st)
st_is_valid(stsp)
install.packages(lwgeom)
install.packages('lwgeom')
lwgeom::st_is_valid(stsp)
library(lwgeom)
lwgeom::st_is_valid(stsp)
# Check if there are any self-intersections in the polygons
sf::st_is_valid(stsp)
library(terra)
# Convert the SpatialPolygonsDataFrame to a 'terra' object
terra_poly <- vect(stsp)
# Check if there are any self-intersections in the polygons
is.valid(terra_poly)
# Check if there are any self-intersections in the polygons
all(is.valid(terra_poly))
stsp_as_sf <- st_as_sf(stsp, coords = 1:2)
head(str(stsp)
)
head(str(stsp))
# Capture the output of str(stsp)
output <- capture.output(str(stsp))
# Specify the file path for the output .txt file
file_path <- "stsp_structure.txt"
# Write the captured output to a .txt file
writeLines(output, file_path)
# Convert to SpatialPolygonsDataFrame
stsp_sp <- as(stsp, "Spatial")
# Transform to desired projection
stsp_sp_transformed <- spTransform(stsp_sp, CRS("+proj=longlat +datum=NAD83"))
# Assuming your original CRS is EPSG:XXXX, replace XXXX with the appropriate EPSG code
original_crs <- CRS("+init=EPSG:XXXX")  # Replace XXXX with your original CRS
# troubleshooting ---------------------------------------------------------
# library(sp)
stsp_transformed <- spTransform(stsp, CRS("+init=epsg:4269"))
stsp_backup_as_sf <-
stsp_backup@polygons %>%
st_as_sf()
stsp_backup_as_sf <-
stsp_backup %>%
st_as_sf()
lag <- left_join(lag, stsf)
lag <- left_join(lag, stsp)
stsf <-
stsp %>%
st_transform(4269) %>%
st_centroid() %>%
st_join(., puma) %>%
mutate(dense = ifelse(puma$puma_density >= 3000, 1, 0)) %>%
st_drop_geometry()
class(stsp)
# Assuming `stsp` is your SpatialPolygonsDataFrame
# Perform the necessary operations
stsp$dense <- ifelse(stsp$puma_density >= 3000, 1, 0)
stsp <- stsp_backup
stsp@data <- stsp@data |>
select(
GEOID,
tr_medrent18,
tr_medrent12,
tr_chrent,
tr_pchrent,
rm_medrent18,
rm_medrent12
) |> mutate(GEOID = as.numeric(GEOID))
subset_logical <- !is.na(stsp$tr_chrent)
stsp@data <- stsp@data[subset_logical,]
stsp@polygons <- stsp@polygons[subset_logical]
stsp@plotOrder <- stsp@plotOrder[subset_logical]
rownames(stsp@data) <- as.character(seq(nrow(stsp@data)))
stsp$tr_pchrent.lag <- lag.listw(lw_dist_idwW, stsp$tr_pchrent)
stsp$tr_chrent.lag <- lag.listw(lw_dist_idwW, stsp$tr_chrent)
stsp$tr_medrent18.lag <- lag.listw(lw_dist_idwW, stsp$tr_medrent18)
colnames(puma)
stsf <-
stsp %>%
st_as_sf()
class(stsp)
lag <- left_join(lag, stsf)
lag <- left_join(lag, stsp)
