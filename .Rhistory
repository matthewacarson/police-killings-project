nh_values <- seq(10000, 250000, 10000)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(IncomeE = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_1, newdata = nh_df, type = "response")
predictions
head(LUOF_counts)
head(LUOF_counts$LUOFs)
head(LUOF_counts$LUOFs) |> range()
head(LUOF_counts$LUOFs) |> summary()
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID)) |>
rename(LUOFs = n) |>
mutate(LUOFs = case_when(is.na(LUOFs) ~ 0, TRUE ~ LUOFs))
fatal_enc$joined |>
count(GEOID)) |>
fatal_enc$joined |>
count(GEOID)) |>
fatal_enc$joined |>
count(GEOID
)
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID)) |>
rename(LUOFs = n) |>
mutate(LUOFs_binary = case_when(is.na(LUOFs) ~ 0, TRUE ~ LUOFs))
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID)) |>
rename(LUOFs = n) |>
mutate(LUOFs_binary = case_when(is.na(LUOFs) ~ FALSE, TRUE ~ TRUE))
logit_1 <-
glm(
formula = as.logical(LUOF_binary) ~ IncomeE,
data = LUOF_counts,
family = 'binomial'
)
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID)) |>
rename(LUOFs = n) |>
mutate(LUOF_binary = case_when(is.na(LUOFs) ~ FALSE, TRUE ~ TRUE))
logit_1 <-
glm(
formula = as.logical(LUOFs_binary) ~ IncomeE,
data = LUOF_counts,
family = 'binomial'
)
logit_1 <-
glm(
formula = as.logical(LUOF_binary) ~ IncomeE,
data = LUOF_counts,
family = 'binomial'
)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(10000, 250000, 10000)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(IncomeE = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_1, newdata = nh_df, type = "response")
predictions
head(LUOF_counts)
head(LUOF_counts$LUOF_binary)
LUOF_counts$LUOF_binary |> range()
sum(LUOF_counts$LUOF_binary)
fatal_enc$joined |>
count(GEOID)
fatal_enc$joined |>
count(GEOID) |>
mutate(case_when(n > 0 ~ TRUE, TRUE ~ FALSE))
fatal_enc$joined |>
count(GEOID) |>
mutate(case_when(n > 0 ~ TRUE, TRUE ~ FALSE)) |>
rename(LUOFs = n)
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID) |>
mutate(case_when(n > 0 ~ TRUE, TRUE ~ FALSE)) |>
rename(LUOFs = n))
logit_1 <-
glm(
formula = as.logical(LUOF_binary) ~ IncomeE,
data = LUOF_counts,
family = 'binomial'
)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(10000, 250000, 10000)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(IncomeE = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_1, newdata = nh_df, type = "response")
sum(LUOF_counts$`case_when(n > 0 ~ TRUE, TRUE ~ FALSE)`)
fatal_enc$joined |>
count(GEOID)
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID) |>
mutate(LUOF_binary = case_when(!is.na(n) & n > 0 ~ TRUE, TRUE ~ FALSE)) |>
rename(LUOFs = n))
sum(LUOF_counts$LUOF_binary)
sum(LUOF_counts$LUOF_binary, na.rm = T)
ncol(LUOF_counts)
nrow(LUOF_counts)
nrow(all_tracts$income_population_quintiles_2020)
# count number of killings in tracts
source('summary_tables.R')
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID) |>
mutate(LUOF_binary = case_when(!is.na(n) & n > 0 ~ TRUE, TRUE ~ FALSE)) |>
rename(LUOFs = n))
logit_1 <-
glm(
formula = as.logical(LUOF_binary) ~ IncomeE,
data = LUOF_counts,
family = 'binomial'
)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(10000, 250000, 10000)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(IncomeE = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_1, newdata = nh_df, type = "response")
predictions
all_tracts$income_population_quintiles_2020
head(LUOF_counts$LUOF_binary)
sum(fatal_enc$joined$GEOID %in% all_tracts$income_population_quintiles_2020$GEOID)
sum(all_tracts$income_population_quintiles_2020$GEOID %in% fatal_enc$joined$GEOID)
fatal_enc$joined_backup <-
inner_join(
x = fatal_enc$initial_clean_geoid,
y = all_tracts$income_population_quintiles_2020,
by = "GEOID")
fatal_enc$joined <-
fatal_enc$joined_backup |>
mutate(
race =
case_when(
race == "European-American/White" ~ "White",
race == "African-American/Black" ~ "Black",
race == "Hispanic/Latino" ~ race,
TRUE ~ "Other/Unknown"
),
race_imputed =
case_when(
race_imputed == "European-American/White" ~ "White",
race_imputed == "African-American/Black" ~ "Black",
race_imputed == "Hispanic/Latino" ~ race_imputed,
TRUE ~ "Other/Unknown"
)
)
# count number of killings in tracts
source('summary_tables.R')
sum(all_tracts$income_population_quintiles_2020$GEOID %in% fatal_enc$joined$GEOID)
nrow(fatal_enc$joined)
anyNA(fatal_enc$joined$GEOID)
nrow(all_tracts$income_population_quintiles_2020)
all_tracts$income_population_quintiles_2020 <- st_drop_geometry(all_tracts$population_income2020)
!is.na(all_tracts$income_population_quintiles_2020$IncomeE)
sum(!is.na(all_tracts$income_population_quintiles_2020$IncomeE))
sum(is.na(all_tracts$income_population_quintiles_2020$IncomeE))
nrow(all_tracts$income_population_quintiles_2020)
anyDuplicated(all_tracts$income_population_quintiles_2020$GEOID)
duplicated(all_tracts$income_population_quintiles_2020$GEOID)
duplicated(all_tracts$income_population_quintiles_2020$GEOID) |> sum()
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID) |>
mutate(LUOF_binary = case_when(!is.na(n) & n > 0 ~ TRUE, TRUE ~ FALSE)) |>
rename(LUOFs = n))
sum(LUOF_counts$LUOF_binary)
sum(LUOF_counts$LUOF_binary, na.rm = T)
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID) |>
mutate(LUOF_binary = case_when(!is.na(n) & n >= 1 ~ TRUE, TRUE ~ FALSE)) |>
rename(LUOFs = n))
sum(LUOF_counts$LUOF_binary, na.rm = T)
sum(LUOF_counts$LUOF_binary, na.rm = F)
fatal_enc$joined |>
count(GEOID)
fatal_enc$joined |>
count(GEOID) |> is.na(n)
test <- fatal_enc$joined |>
count(GEOID)
sum(is.na(test$n))
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID) |>
mutate(LUOF_binary = case_when(n >= 1 ~ TRUE, TRUE ~ FALSE)) |>
rename(LUOFs = n))
sum(LUOF_counts$LUOF_binary, na.rm = F)
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID) |>
rename(LUOFs = n)) |>
mutate(LUOF_binary = case_when(LUOFs >= 1 ~ TRUE, TRUE ~ FALSE))
sum(LUOF_counts$LUOF_binary, na.rm = F)
nrow(fatal_enc$joined)
by = join_by(GEOID)
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined,
by = join_by(GEOID))
LUOF_bin <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
mutate(fatal_enc_bin = TRUE),
by = join_by(GEOID))
LUOF_bin <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
mutate(fatal_enc_bin = TRUE) |>
select(GEOID, fatal_enc_bin),
by = join_by(GEOID))
LUOF_binary <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
mutate(fatal_enc_bin = TRUE) |>
select(GEOID, fatal_enc_bin),
by = join_by(GEOID))
rm(LUOF_bin, LUOF_counts)
View(LUOF_binary)
LUOF_binary <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
mutate(fatal_enc_binary = TRUE) |>
select(GEOID, fatal_enc_bin),
by = join_by(GEOID))
select(GEOID, fatal_enc_binary,
x = all_tracts$income_population_quintiles_2020,
mutate(fatal_enc_binary = TRUE) |>
LUOF_binary <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
mutate(fatal_enc_binary = TRUE) |>
select(GEOID, fatal_enc_binary),
by = join_by(GEOID))
LUOF_binary$fatal_enc_binary <-
ifelse(
LUOF_binary$fatal_enc_binary,
FALSE
)
View(LUOF_binary)
LUOF_binary$fatal_enc_binary <-
ifelse(
LUOF_binary$fatal_enc_binary,
TRUE,
FALSE
)
View(lw_bin)
View(LUOF_binary)
ifelse(
LUOF_binary$fatal_enc_binary,
TRUE,
FALSE
)
LUOF_binary$fatal_enc_binary <-
ifelse(
is.na(LUOF_binary$fatal_enc_binary),
FALSE,
TRUE
)
View(LUOF_binary)
logit_1 <-
glm(
formula = as.logical(LUOF_binary) ~ IncomeE,
data = LUOF_binary,
family = 'binomial'
)
logit_1 <-
glm(
formula = LUOF_binary ~ IncomeE,
data = LUOF_binary,
family = 'binomial'
)
View(LUOF_binary)
ifelse(
is.na(LUOF_binary$fatal_enc_binary),
FALSE,
TRUE
)
LUOF_binary <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
mutate(fatal_enc_binary = TRUE) |>
select(GEOID, fatal_enc_binary),
by = join_by(GEOID))
ifelse(
is.na(LUOF_binary$fatal_enc_binary),
FALSE,
TRUE
)
LUOF_binary$fatal_enc_binary <-
ifelse(
is.na(LUOF_binary$fatal_enc_binary) | LUOF_binary$fatal_enc_binary,
FALSE,
TRUE
)
LUOF_binary <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
mutate(fatal_enc_binary = TRUE) |>
select(GEOID, fatal_enc_binary),
by = join_by(GEOID))
LUOF_binary$fatal_enc_binary <-
ifelse(
is.na(LUOF_binary$fatal_enc_binary) | LUOF_binary$fatal_enc_binary,
FALSE,
TRUE
)
ifelse(
is.na(LUOF_binary$fatal_enc_binary) | LUOF_binary$fatal_enc_binary,
FALSE,
TRUE
)
LUOF_binary <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
mutate(fatal_enc_binary = TRUE) |>
select(GEOID, fatal_enc_binary),
by = join_by(GEOID))
ifelse(
is.na(LUOF_binary$fatal_enc_binary) | LUOF_binary$fatal_enc_binary,
FALSE,
TRUE
)
all_tracts$income_population_quintiles_2020$GEOID %in% fatal_enc$joined
sum(all_tracts$income_population_quintiles_2020$GEOID %in% fatal_enc$joined)
all_tracts$income_population_quintiles_2020$GEOID %in% fatal_enc$joined$GEOID
sum(all_tracts$income_population_quintiles_2020$GEOID %in% fatal_enc$joined$GEOID)
LUOF_binary$LUOF_binary <- all_tracts$income_population_quintiles_2020$GEOID %in% fatal_enc$joined$GEOID
logit_1 <-
glm(
formula = LUOF_binary ~ IncomeE,
data = LUOF_binary,
family = 'binomial'
)
View(LUOF_binary)
all_tracts$income_population_quintiles_2020$GEOID %in% fatal_enc$joined$GEOID
LUOF_binary$LUOF_binary <- all_tracts$income_population_quintiles_2020$GEOID %in% fatal_enc$joined$GEOID
LUOF_binary <- all_tracts$income_population_quintiles_2020
LUOF_binary$LUOF_binary <- all_tracts$income_population_quintiles_2020$GEOID %in% fatal_enc$joined$GEOID
logit_1 <-
glm(
formula = LUOF_binary ~ IncomeE,
data = LUOF_binary,
family = 'binomial'
)
sum(LUOF_binary$LUOF_binary)
nrow(all_tracts$income_population_quintiles_2020)
anyNA(all_tracts$income_population_quintiles_2020$IncomeE)
# count number of killings in tracts
source('summary_tables.R')
LUOF_binary <- all_tracts$income_population_quintiles_2020
LUOF_binary$LUOF_binary <- all_tracts$income_population_quintiles_2020$GEOID %in% fatal_enc$joined$GEOID
logit_1 <-
glm(
formula = LUOF_binary ~ IncomeE,
data = LUOF_binary,
family = 'binomial'
)
summary(LUOF_binary$LUOF_binary)
anyNA(LUOF_binary$LUOF_binary)
nrow(fatal_enc$joined)
nrow(fatal_enc$initial_clean_geoid)
sum(fatal_enc$initial_clean_geoid$GEOID %in% all_tracts$income_population_quintiles_2020$GEOID)
load("git_ignore/RData/acs_2020_raw.Rdata", envir = all_tracts)
test <-
st_join(
x = fatal_enc$initial_clean,
y = all_tracts$population_income2020 %>% select(GEOID),
join = st_within)
)
View(test)
#
# ## Adding sf object to fatal_enc (combined lat/long) ####
# fatal_enc$initial_clean <-
#   fatal_enc$initial_clean %>%
#   st_as_sf(coords = c('longitude', 'latitude'), crs = "NAD83")
#
# ## Join the fatal encounters data set with census data
# ### Add GEOID to the fatal encounters data set
#
# # r Add GEOID to the fatal encounters data set
fatal_enc$initial_clean_geoid <-
st_join(
x = fatal_enc$initial_clean,
y = all_tracts$population_income2020 %>% select(GEOID),
join = st_within)
#
fatal_enc$initial_clean_geoid <- st_drop_geometry(fatal_enc$initial_clean_geoid)
anyDuplicated(fatal_enc$initial_clean_geoid$unique_id)
nrow(fatal_enc$initial_clean_geoid)
#
# Remove duplicated rows (unique ids that appear twice)
fatal_enc$initial_clean_geoid <-
fatal_enc$initial_clean_geoid[
!duplicated(fatal_enc$initial_clean_geoid$unique_id) |
duplicated(fatal_enc$initial_clean_geoid, fromLast = TRUE),]
nrow(fatal_enc$initial_clean_geoid)
anyDuplicated(fatal_enc$initial_clean_geoid$unique_id)
duplicated(fatal_enc$initial_clean_geoid$unique_id)
duplicated(fatal_enc$initial_clean_geoid$unique_id) |> sum()
fatal_enc$joined_backup <-
inner_join(
x = fatal_enc$initial_clean_geoid,
y = all_tracts$income_population_quintiles_2020,
by = "GEOID")
nrow(all_tracts$income_population_quintiles_2020)
fatal_enc$joined_backup <-
left_join(
x = fatal_enc$initial_clean_geoid,
y = all_tracts$income_population_quintiles_2020,
by = "GEOID")
nrow(fatal_enc$joined_backup)
anyNA(fatal_enc$joined_backup)
anyNA(fatal_enc$joined_backup$IncomeE)
fatal_enc$joined_backup <-
inner_join(
x = fatal_enc$initial_clean_geoid,
y = all_tracts$income_population_quintiles_2020,
by = "GEOID")
anyNA(fatal_enc$joined_backup$IncomeE)
nrow(fatal_enc$joined_backup)
# count number of killings in tracts
source('summary_tables.R')
LUOF_binary <- all_tracts$income_population_quintiles_2020
LUOF_binary$LUOF_binary <- all_tracts$income_population_quintiles_2020$GEOID %in% fatal_enc$joined$GEOID
# Logistic regression
logit_1 <-
glm(
formula = LUOF_binary ~ IncomeE,
data = LUOF_binary,
family = 'binomial'
)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(10000, 250000, 10000)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(IncomeE = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_1, newdata = nh_df, type = "response")
predictions
seq(0,0.05, 1)
seq(0,0.05, 1)
seq(1, 2, 22)
seq(0, 1, 0.05)
245000 / 21
seq(0, 1, 0.04)
seq(0, 1, 0.04) |> length
seq(0, 1, 0.04) |> length()
seq(0, 1, 0.04) |> length()
245000 / 26
(250000 - 2500) /26
seq(2500, 250000, 10000)
seq(2500, 250000, 10000) |> length()
seq(2500, 250000, 8000) |> length()
seq(2500, 250000, 9000) |> length()
seq(2500, 250000, 9500) |> length()
seq(2500, 250000, 9519)
seq(2500, 250000, 9520)
.05 * .03 * 22
seq(2500, 250000, 9519) |> length()
seq(2500, 250000, 9530) |> length()
seq(2500, 250000, 9530)
seq(2500, 250000, 9525)
seq(2500, 250000, 9522)
seq(2500, 250000, 9520)
seq(2500, 250000, 9519)
seq(2500, 250000, 9520)
seq(3000, 250000, 9520)
seq(3000, 250000, 9500)
seq(3000, 250000, 9550)
seq(3000, 250000, 9750)
seq(3000, 250000, 9850)
seq(3000, 250000, 9900)
seq(3000, 250000, 9800)
seq(3000, 250000, 9850)
seq(3000, 250000, 9850) |> length()
seq(0, 1, 0.04) |> length()
