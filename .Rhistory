count(Quintile = income_quintiles_nolab, Race = race_imputed) |>
rename(Killings_by_Quintile_and_Race = n) |>
mutate(Killings_Per_Yr = Killings_by_Quintile_and_Race / 6)
fatal_enc$joined |>
filter(
!is.na(income_quintiles_nolab) &
race_imputed %in% c(
"Black",
"White",
"Hispanic/Latino")) |>
count(race_imputed) |>
rename(Killings_Race_Total = n, Race = race_imputed),
fatal_enc$joined |>
filter(
!is.na(income_quintiles_nolab) &
race_imputed %in% c(
"Black",
"White",
"Hispanic/Latino")) |>
count(race_imputed) |>
rename(Killings_Race_Total = n, Race = race_imputed)
fatal_enc$joined |>
filter(
!is.na(income_quintiles_nolab) &
race_imputed %in% c(
"Black",
"White",
"Hispanic/Latino")) |>
count(Quintile = income_quintiles_nolab, Race = race_imputed) |>
rename(Killings_by_Quintile_and_Race = n) |>
mutate(Killings_Per_Yr = Killings_by_Quintile_and_Race / 6)
x = c(mark = 'pizza', greg = 'chinese', sally = 'hambruger')
x
rm()
rm(x)
rm()
x = c(mark = 'pizza', greg = 'chinese', sally = 'hambruger')
x[mark]
rm(x)
favorite_foods = c(mark = 'pizza', greg = 'chinese', sally = 'hambruger')
favorite_foods['greg']
rm(favorite_foods)
fatal_enc$joined |>
filter(
!is.na(income_quintiles_nolab) &
race_imputed %in% c(
"Black",
"White",
"Hispanic/Latino")) |>
count(Quintile = income_quintiles_nolab, Race = race_imputed) |>
rename(Killings_by_Quintile_and_Race = n) |>
mutate(Killings_Per_Yr = Killings_by_Quintile_and_Race / 6)
fatal_enc$joined |>
filter(
!is.na(income_quintiles_nolab) &
race_imputed %in% c(
"Black",
"White",
"Hispanic/Latino"))
fatal_enc$joined |>
filter(
!is.na(income_quintiles_nolab) &
race_imputed %in% c(
"Black",
"White",
"Hispanic/Latino")) |>
count(
Quintile = income_quintiles_nolab,
Race = race_imputed,
Majority) |>
rename(Killings_by_Quintile_and_Race = n) |>
mutate(Killings_Per_Yr = Killings_by_Quintile_and_Race / 6)
fatal_enc$joined |>
filter(
!is.na(income_quintiles_nolab) &
race_imputed %in% c(
"Black",
"White",
"Hispanic/Latino") &
!is.na(Majority)
) |>
count(
Quintile = income_quintiles_nolab,
Race = race_imputed,
Majority) |>
rename(Killings_by_Quintile_and_Race = n) |>
mutate(Killings_Per_Yr = Killings_by_Quintile_and_Race / 6)
fatal_enc$joined |>
filter(
!is.na(income_quintiles_nolab) &
race_imputed %in% c(
"Black",
"White",
"Hispanic/Latino") &
!is.na(Majority)
) |>
count(
Quintile = income_quintiles_nolab,
Race = race_imputed,
Majority) |>
rename(Killings_by_Quintile_and_Race = n) |>
mutate(Killings_Per_Yr = Killings_by_Quintile_and_Race / 6) |> print(n=100)
View(all_tracts)
View(summary_tables)
View(fatal_enc)
View(fatal_enc[["joined"]])
View(all_tracts)
all_tracts[["nonile_2020"]]
View(all_tracts[["population_income2020"]])
View(all_tracts[["population_income2019"]])
View(all_tracts[["income_population_quintiles_2020"]])
colnames(all_tracts[["income_population_quintiles_2020"]])
View(summary_tables)
View(summary_tables[["summary_1"]])
fatal_enc$joined |>
count(GEOID)
fatal_enc$joined |>
count(GEOID) |>
arrange(desc(n))
fatal_enc$joined |>
count(GEOID) |>
mutate(as.logical(n))
as.logical(1:50)
as.logical(0:50)
as.logical(-3:50)
fatal_enc$joined |>
count(GEOID) |>
arrange(desc(n))
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID) |>
arrange(desc(n))
)
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID) |>
arrange(desc(n))
) |> view()
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID) |>
arrange(desc(n))
)
source("~/.active-rstudio-document", echo=TRUE)
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(LUOFs = GEOID) |>
arrange(desc(n)))
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(LUOFs = GEOID)
)
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID)
arrange(desc(n)))
count(GEOID)
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID))
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(LUOFs = GEOID))
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID)) |>
rename(LUOFs = n)
View(LUOF_counts)
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID)) |>
rename(LUOFs = n) |>
mutate(case_when(LUOFs == NA ~ 0,
TRUE ~ LUOFs))
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID)) |>
rename(LUOFs = n) |>
mutate(LUOFs = case_when(LUOFs == NA ~ 0, TRUE ~ LUOFs))
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID)) |>
rename(LUOFs = n) |>
mutate(LUOFs = case_when(is.na(LUOFs) ~ 0, TRUE ~ LUOFs))
LUOF_counts <-
left_join(
x = all_tracts$income_population_quintiles_2020,
y = fatal_enc$joined |>
count(GEOID)) |>
rename(LUOFs = n) |>
mutate(LUOFs = case_when(is.na(LUOFs) ~ 0, TRUE ~ LUOFs))
View(LUOF_counts)
summary(LUOF_counts)
summary(LUOF_counts$LUOFs)
quantile(LUOF_counts$LUOFs)
quantile(LUOF_counts$LUOFs, 0.8)
quantile(LUOF_counts$LUOFs, 0.9)
quantile(LUOF_counts$LUOFs, 0.5)
quantile(LUOF_counts$LUOFs, 0.95)
quantile(LUOF_counts$LUOFs, 0.94)
quantile(LUOF_counts$LUOFs, 0.93)
quantile(LUOF_counts$LUOFs, 0.92)
quantile(LUOF_counts$LUOFs, 0.925)
quantile(LUOF_counts$LUOFs, 0.922)
quantile(LUOF_counts$LUOFs, 0.923)
quantile(LUOF_counts$LUOFs, 0.924)
colnames(LUOF_counts)
head(LUOF_counts$NH_BlackP)
head(LUOF_counts$NH_BlackP, 50)
logit_1 <-
glm(
formula = LUOFs ~ NH_BLackP
)
logit_1 <-
glm(
formula = LUOFs ~ NH_BLackP,
data = LUOF_counts,
family = 'binomial'
)
logit_1 <-
glm(
formula = LUOFs ~ NH_BlackP,
data = LUOF_counts,
family = 'binomial'
)
logit_1 <-
glm(
formula = as.logical(LUOFs) ~ NH_BlackP,
data = LUOF_counts,
family = 'binomial'
)
summary(logit_1)
exp(0.6560)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(0.01, 1, by = 0.01)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(NH_BlackP = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_1, newdata = nh_df, type = "response")
# View the predictions
print(predictions)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(0.01, 1, by = 0.001)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(NH_BlackP = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_1, newdata = nh_df, type = "response")
# View the predictions
print(predictions)
# View the predictions
rm(predictions)
# Make predictions using the fitted model
predict(logit_1, newdata = nh_df, type = "response")
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(0.01, 1, by = 0.01)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(NH_BlackP = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_1, newdata = nh_df, type = "response")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions, type = "l", xlab = "NH_BlackP", ylab = "Predicted Probability", main = "Predicted Probability vs NH_BlackP")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
xlim = c(0, 1)
type = "l",
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
xlim = c(0, 1),
type = "l",
xlab = "NH_BlackP",
ylab = "Predicted Probability",
main = "Predicted Probability vs NH_BlackP",)
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
ylim = c(0, 1),
type = "l",
xlab = "NH_BlackP",
ylab = "Predicted Probability",
main = "Predicted Probability vs NH_BlackP",)
logit_2 <-
glm(
formula = as.logical(LUOFs) ~ IncomeE,
data = LUOF_counts,
family = 'binomial'
)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(1000, 1, by = 150000)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(1000, 150000, by = 1000)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(IncomeE = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_2, newdata = nh_df, type = "response")
predictions
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
# ylim = c(0, 1),
type = "l",
xlab = "IncomeE",
ylab = "Predicted Probability",
main = "Predicted Probability vs IncomeE")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
ylim = c(0, 1),
type = "l",
xlab = "IncomeE",
ylab = "Predicted Probability",
main = "Predicted Probability vs IncomeE")
logit_1 <-
glm(
formula = as.logical(LUOFs) ~ NH_BlackP,
data = LUOF_counts,
family = 'binomial'
)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(0.01, 1, by = 0.01)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(NH_BlackP = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_1, newdata = nh_df, type = "response")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
ylim = c(0, 1),
type = "l",
xlab = "NH_BlackP",
ylab = "Predicted Probability",
main = "Predicted Probability vs NH_BlackP")
logit_2 <-
glm(
formula = as.logical(LUOFs) ~ IncomeE,
data = LUOF_counts,
family = 'binomial'
)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(1000, 150000, by = 1000)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(IncomeE = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_2, newdata = nh_df, type = "response")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
ylim = c(0, 1),
type = "l",
xlab = "IncomeE",
ylab = "Predicted Probability",
main = "Predicted Probability vs IncomeE")
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(1000, 250000, by = 1000)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(IncomeE = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_2, newdata = nh_df, type = "response")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
ylim = c(0, 1),
type = "l",
xlab = "IncomeE",
ylab = "Predicted Probability",
main = "Predicted Probability vs IncomeE")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
# ylim = c(0, 1),
type = "l",
xlab = "IncomeE",
ylab = "Predicted Probability",
main = "Predicted Probability vs IncomeE")
logit_1 <-
glm(
formula = as.logical(LUOFs) ~ NH_BlackP,
data = LUOF_counts,
family = 'binomial'
)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(0.01, 1, by = 0.01)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(NH_BlackP = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_1, newdata = nh_df, type = "response")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
# ylim = c(0, 1),
type = "l",
xlab = "NH_BlackP",
ylab = "Predicted Probability",
main = "Predicted Probability vs NH_BlackP")
logit_2 <-
glm(
formula = as.logical(LUOFs) ~ IncomeE,
data = LUOF_counts,
family = 'binomial'
)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(1000, 250000, by = 1000)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(IncomeE = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_2, newdata = nh_df, type = "response")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
# ylim = c(0, 1),
type = "l",
xlab = "IncomeE",
ylab = "Predicted Probability",
main = "Predicted Probability vs IncomeE")
seq(1000, 250000, by = 1000)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(2500, 250000, by = 1000)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(IncomeE = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_2, newdata = nh_df, type = "response")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
# ylim = c(0, 1),
type = "l",
xlab = "IncomeE",
ylab = "Predicted Probability",
main = "Predicted Probability vs IncomeE")
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(5000, 250000, by = 1000)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(IncomeE = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_2, newdata = nh_df, type = "response")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
# ylim = c(0, 1),
# xlim = c(),
type = "l",
xlab = "IncomeE",
ylab = "Predicted Probability",
main = "Predicted Probability vs IncomeE")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
# ylim = c(0, 1),
xlim = c(5000, 25000),
type = "l",
xlab = "IncomeE",
ylab = "Predicted Probability",
main = "Predicted Probability vs IncomeE")
seq(1, 250000, by = 1000)
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(1000, 250000, by = 1000)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(IncomeE = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_2, newdata = nh_df, type = "response")
# Generate a sequence of values from 0.01 through 1
nh_values <- seq(1000, 250000, by = 1000)
# Create a dataframe with NH_BlackP values
nh_df <- data.frame(IncomeE = nh_values)
# Make predictions using the fitted model
predictions <- predict(logit_2, newdata = nh_df, type = "response")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
# ylim = c(0, 1),
# xlim = c(5000, 25000),
type = "l",
xlab = "IncomeE",
ylab = "Predicted Probability",
main = "Predicted Probability vs IncomeE")
# Plot the predicted probabilities against NH_BlackP values
plot(nh_values, predictions,
# ylim = c(0, 1),
xlim = c(2500, 25000),
type = "l",
xlab = "IncomeE",
ylab = "Predicted Probability",
main = "Predicted Probability vs IncomeE")
logit_2 <-
glm(
formula = as.logical(LUOFs) ~ IncomeE + NH_BlackP,
data = LUOF_counts,
family = 'binomial'
)
summary(logit_2)
logit_2 <-
glm(
formula = as.logical(LUOFs) ~ IncomeE,
data = LUOF_counts,
family = 'binomial'
)
logit_3 <-
glm(
formula = as.logical(LUOFs) ~ IncomeE + NH_BlackP,
data = LUOF_counts,
family = 'binomial'
)
-0.000012991 * 1000
# count number of killings in tracts
source('summary_tables.R')
